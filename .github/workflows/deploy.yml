name: Deploy Next.js Frontend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  HOST: ${{ secrets.SSH_HOST }}
  HOST_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/iris-frontend:latest
          cache-from: type=registry,ref=${{ env.DOCKER_USERNAME }}/iris-frontend:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_USERNAME }}/iris-frontend:buildcache,mode=max

      - name: Deploy to Ubuntu server
  uses: appleboy/ssh-action@master
  with:
    host: ${{ env.HOST }}
    username: ${{ env.HOST_USERNAME }}
    key: ${{ env.SSH_PRIVATE_KEY }}
    script: |
      echo "Next.js Frontend deployment started at $(date '+%Y-%m-%d %H:%M:%S UTC')"
      
      # Create deployment directory if it doesn't exist
      mkdir -p ~/iris/frontend
      
      # Ensure .env exists ‚Äî fail fast if missing (no fallback)
      if [ ! -f ~/iris/frontend/.env ]; then
        echo "‚ùå CRITICAL: .env file NOT FOUND at ~/iris/frontend/.env"
        echo "Please create it on the server with required env vars before deploying."
        echo "Required at minimum: NODE_ENV, NEXT_PUBLIC_API_URL, PORT"
        exit 1
      fi
      
      # Backup existing .env
      echo "‚úÖ Environment file found ‚Äî backing up..."
      cp ~/iris/frontend/.env ~/iris/frontend/.env.backup.$(date +%Y%m%d_%H%M%S)
      
      # Validate critical environment variables
      echo "üîç Validating required environment variables..."
      REQUIRED_VARS=("NODE_ENV" "NEXT_PUBLIC_API_URL" "PORT")
      MISSING_VARS=()
      
      for var in "${REQUIRED_VARS[@]}"; do
        if ! grep -q "^$var=" ~/iris/frontend/.env; then
          MISSING_VARS+=("$var")
        fi
      done
      
      if [ ${#MISSING_VARS[@]} -gt 0 ]; then
        echo "‚ùå CRITICAL: Missing required env vars in .env: ${MISSING_VARS[*]}"
        echo "Please add them before deploying."
        exit 1
      fi
      
      # Display sanitized .env for verification
      echo "üìÑ Current .env (sanitized):"
      grep -E "^(NODE_ENV|PORT|NEXT_PUBLIC_API_URL)" ~/iris/frontend/.env || echo "‚ö†Ô∏è Required vars not found"
      
      # Stop and remove existing container
      echo "üõë Stopping existing container..."
      sudo docker stop iris-frontend 2>/dev/null || true
      sudo docker rm iris-frontend 2>/dev/null || true
      
      # Pull latest image
      echo "‚¨áÔ∏è Pulling latest image..."
      sudo docker pull ${{ env.DOCKER_USERNAME }}/iris-frontend:latest
      
      # Run new container with server-side .env mounted read-only
      echo "üöÄ Starting new container..."
      sudo docker run -d \
        --name iris-frontend \
        --restart unless-stopped \
        -p 3000:3000 \
        -v ~/iris/frontend/.env:/app/.env:ro \
        ${{ env.DOCKER_USERNAME }}/iris-frontend:latest
      
      # Wait for container to initialize
      echo "‚è≥ Waiting 15 seconds for container to start..."
      sleep 15
      
      # Verify container is running
      if ! sudo docker ps | grep -q iris-frontend; then
        echo "‚ùå Container failed to start"
        echo "=== CONTAINER LOGS ==="
        sudo docker logs iris-frontend --tail 50
        exit 1
      fi
      
      echo "‚úÖ Container is running"
      echo "Container ID: $(sudo docker ps -q -f name=iris-frontend)"
      
      # Verify .env is mounted inside container
      if ! sudo docker exec iris-frontend [ -f /app/.env ]; then
        echo "‚ùå .env file not mounted inside container!"
        exit 1
      fi
      echo "‚úÖ .env successfully mounted inside container"
      
      # Test HTTP response from container
      echo "üß™ Testing application health on localhost:3000..."
      if curl -f -s --max-time 10 http://localhost:3000 > /dev/null; then
        echo "‚úÖ Application responded successfully"
      else
        echo "‚ùå Application health check FAILED"
        echo "=== LAST 30 LOG LINES ==="
        sudo docker logs iris-frontend --tail 30
        exit 1
      fi
      
      # Reload Nginx if config exists
      echo "üîÑ Checking Nginx configuration..."
      if [ -f "/etc/nginx/sites-enabled/iris" ]; then
        echo "‚úÖ Nginx config found ‚Äî reloading..."
        if sudo nginx -t && sudo systemctl reload nginx; then
          echo "‚úÖ Nginx reloaded successfully"
        else
          echo "‚ö†Ô∏è Nginx config test or reload failed ‚Äî check syntax"
        fi
      else
        echo "‚ö†Ô∏è Nginx config NOT found at /etc/nginx/sites-enabled/iris"
        echo "üí° Consider setting up reverse proxy to http://localhost:3000"
      fi
      
      echo "üéâ Deployment completed successfully at $(date '+%Y-%m-%d %H:%M:%S UTC')"

      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        if: success()
        with:
          host: ${{ env.HOST }}
          username: ${{ env.HOST_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            echo "=== Final Deployment Verification ==="
            
            # Check container status
            if sudo docker ps | grep -q iris-frontend; then
              echo "‚úÖ Container Status: Running"
              echo "Container Details:"
              sudo docker inspect iris-frontend --format='Status: {{.State.Status}} | Started At: {{.State.StartedAt}}'
              echo "Port Mapping:"
              sudo docker port iris-frontend
              
              # Verify env file is mounted
              echo "Checking environment file:"
              if sudo docker exec iris-frontend ls -la /app/.env &>/dev/null; then
                echo "‚úÖ Environment file is mounted"
                echo "Environment variables (non-sensitive):"
                sudo docker exec iris-frontend grep -E "^(NODE_ENV|PORT|NEXT_PUBLIC_)" /app/.env || echo "No public env vars found"
              else
                echo "‚ö†Ô∏è Environment file not found in container"
              fi
              
              # Check application health (frontend + API routes)
              echo "Application Health Check:"
              sleep 10
              
              # Test local frontend access
              FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
              if [ "$FRONTEND_STATUS" = "200" ]; then
                echo "‚úÖ Frontend is accessible locally (HTTP $FRONTEND_STATUS)"
              else
                echo "‚ö†Ô∏è Frontend local health check failed (HTTP $FRONTEND_STATUS)"
              fi
              
              # Test API routes
              API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health 2>/dev/null || echo "000")
              if [ "$API_STATUS" = "200" ]; then
                echo "‚úÖ API routes are working (HTTP $API_STATUS)"
              elif [ "$API_STATUS" = "404" ]; then
                echo "‚ÑπÔ∏è API health endpoint not found (normal if /api/health doesn't exist)"
              else
                echo "‚ÑπÔ∏è API routes status: HTTP $API_STATUS"
              fi
              
              # Test through Nginx (if configured)
              if curl -f -s -o /dev/null -w "%{http_code}" http://localhost:80; then
                echo "‚úÖ Application is accessible through Nginx"
              else
                echo "‚ö†Ô∏è Nginx proxy check failed"
              fi
              
              # Show recent logs
              echo "Recent application logs:"
              sudo docker logs --tail 10 iris-frontend
              
              echo "üéâ Deployment verification completed successfully!"
            else
              echo "‚ùå Container is not running"
              echo "Available containers:"
              sudo docker ps -a
              exit 1
            fi
